// Copyright (c) 2019 Spotify AB.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

public protocol EffectHandler {
    associatedtype Effect
    associatedtype EffectPayload
    associatedtype Event

    func match(effect: Effect) -> EffectPayload?
    func run(with parameters: EffectPayload, sendEvent: @escaping (Event) -> Void)
    func stop()
}

extension EffectHandler {
    public func stop() {}
}

extension EffectHandler {
    /// Attempt to execute an effect using the effect handler.
    ///
    /// - Parameters:
    ///   - effect: The effect to dispatch.
    ///   - sendEvent: A closure to receive any events generated by the effect.
    /// - Returns: `true` if the effect handler matched the event, `false` otherwise.
    @discardableResult
    public func dispatch(effect: Effect, sendEvent: @escaping(Event) -> Void) -> Bool {
        if let match = self.match(effect: effect) {
            self.run(with: match, sendEvent: sendEvent)
            return true
        } else {
            return false
        }
    }
}
